from app import db


class BaseClass(object):
    def as_dict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class {{o.name|title}}(db.Model, BaseClass):
    __tablename__ = '{{o.name}}'
    id = db.Column(db.Integer, primary_key=True)
    updated_at = db.Column(db.DateTime)
    {% for prop in o.properties %}
    {% if prop in persistent_types %}
    {{prop.name}} = db.Column({{ persistent_types[prop.type.name]}})
    {% endif %}
    {% endfor %}
    {% for fk in o.meta %}
    {{fk.label}}_id = db.Column(db.Integer, db.ForeignKey('{{fk.object.name}}.id'))
    {{fk.label}} = db.relationship('{{fk.object.name|title}}', backref=db.backref('{{o.name}}_{{fk.label}}', lazy='dynamic'), {% if fk.foreignKeyType == 'single' %} uselist=False, {% endif %} foreign_keys=[{{fk.label}}_id])
    {% endfor %}